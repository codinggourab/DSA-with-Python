# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reverse(self,head):

        prev = None
        temp = head

        while temp != None:
            front = temp.next
            temp.next = prev
            prev = temp
            temp = front
        return prev
        
    def isPalindrome(self,head):
        if head is None or head.next is None:
            return True

        slow = head
        fast = head

        while fast.next is not None and fast.next.next is not None:
            slow = slow.next
            fast = fast.next.next

        new_head = self.reverse(slow.next)

        first = head
        sec = new_head
        is_pali = True

        while sec != None:
            if first.val != sec.val:
                is_pali = False
                break
            first = first.next
            sec = sec.next
        slow.next = self.reverse(new_head)
        return is_pali
